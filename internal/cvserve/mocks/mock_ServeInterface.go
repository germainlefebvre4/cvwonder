// Code generated by mockery. DO NOT EDIT.

package cvserve

import mock "github.com/stretchr/testify/mock"

// ServeInterfaceMock is an autogenerated mock type for the ServeInterface type
type ServeInterfaceMock struct {
	mock.Mock
}

type ServeInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ServeInterfaceMock) EXPECT() *ServeInterfaceMock_Expecter {
	return &ServeInterfaceMock_Expecter{mock: &_m.Mock}
}

// OpenBrowser provides a mock function with given fields: outputDirectory, inputFilePath
func (_m *ServeInterfaceMock) OpenBrowser(outputDirectory string, inputFilePath string) {
	_m.Called(outputDirectory, inputFilePath)
}

// ServeInterfaceMock_OpenBrowser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenBrowser'
type ServeInterfaceMock_OpenBrowser_Call struct {
	*mock.Call
}

// OpenBrowser is a helper method to define mock.On call
//   - outputDirectory string
//   - inputFilePath string
func (_e *ServeInterfaceMock_Expecter) OpenBrowser(outputDirectory interface{}, inputFilePath interface{}) *ServeInterfaceMock_OpenBrowser_Call {
	return &ServeInterfaceMock_OpenBrowser_Call{Call: _e.mock.On("OpenBrowser", outputDirectory, inputFilePath)}
}

func (_c *ServeInterfaceMock_OpenBrowser_Call) Run(run func(outputDirectory string, inputFilePath string)) *ServeInterfaceMock_OpenBrowser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ServeInterfaceMock_OpenBrowser_Call) Return() *ServeInterfaceMock_OpenBrowser_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServeInterfaceMock_OpenBrowser_Call) RunAndReturn(run func(string, string)) *ServeInterfaceMock_OpenBrowser_Call {
	_c.Run(run)
	return _c
}

// StartLiveReloader provides a mock function with given fields: port, outputDirectory, inputFilePath
func (_m *ServeInterfaceMock) StartLiveReloader(port int, outputDirectory string, inputFilePath string) {
	_m.Called(port, outputDirectory, inputFilePath)
}

// ServeInterfaceMock_StartLiveReloader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartLiveReloader'
type ServeInterfaceMock_StartLiveReloader_Call struct {
	*mock.Call
}

// StartLiveReloader is a helper method to define mock.On call
//   - port int
//   - outputDirectory string
//   - inputFilePath string
func (_e *ServeInterfaceMock_Expecter) StartLiveReloader(port interface{}, outputDirectory interface{}, inputFilePath interface{}) *ServeInterfaceMock_StartLiveReloader_Call {
	return &ServeInterfaceMock_StartLiveReloader_Call{Call: _e.mock.On("StartLiveReloader", port, outputDirectory, inputFilePath)}
}

func (_c *ServeInterfaceMock_StartLiveReloader_Call) Run(run func(port int, outputDirectory string, inputFilePath string)) *ServeInterfaceMock_StartLiveReloader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServeInterfaceMock_StartLiveReloader_Call) Return() *ServeInterfaceMock_StartLiveReloader_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServeInterfaceMock_StartLiveReloader_Call) RunAndReturn(run func(int, string, string)) *ServeInterfaceMock_StartLiveReloader_Call {
	_c.Run(run)
	return _c
}

// StartServer provides a mock function with given fields: port, outputDirectory
func (_m *ServeInterfaceMock) StartServer(port int, outputDirectory string) {
	_m.Called(port, outputDirectory)
}

// ServeInterfaceMock_StartServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartServer'
type ServeInterfaceMock_StartServer_Call struct {
	*mock.Call
}

// StartServer is a helper method to define mock.On call
//   - port int
//   - outputDirectory string
func (_e *ServeInterfaceMock_Expecter) StartServer(port interface{}, outputDirectory interface{}) *ServeInterfaceMock_StartServer_Call {
	return &ServeInterfaceMock_StartServer_Call{Call: _e.mock.On("StartServer", port, outputDirectory)}
}

func (_c *ServeInterfaceMock_StartServer_Call) Run(run func(port int, outputDirectory string)) *ServeInterfaceMock_StartServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *ServeInterfaceMock_StartServer_Call) Return() *ServeInterfaceMock_StartServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServeInterfaceMock_StartServer_Call) RunAndReturn(run func(int, string)) *ServeInterfaceMock_StartServer_Call {
	_c.Run(run)
	return _c
}

// NewServeInterfaceMock creates a new instance of ServeInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServeInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServeInterfaceMock {
	mock := &ServeInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
