// Code generated by mockery v2.53.5. DO NOT EDIT.

package validator

import (
	model "github.com/germainlefebvre4/cvwonder/internal/model"
	validator "github.com/germainlefebvre4/cvwonder/internal/validator"
	mock "github.com/stretchr/testify/mock"
)

// ValidatorInterfaceMock is an autogenerated mock type for the ValidatorInterface type
type ValidatorInterfaceMock struct {
	mock.Mock
}

type ValidatorInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ValidatorInterfaceMock) EXPECT() *ValidatorInterfaceMock_Expecter {
	return &ValidatorInterfaceMock_Expecter{mock: &_m.Mock}
}

// ValidateFile provides a mock function with given fields: filePath
func (_m *ValidatorInterfaceMock) ValidateFile(filePath string) (*validator.ValidationResult, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateFile")
	}

	var r0 *validator.ValidationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*validator.ValidationResult, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) *validator.ValidationResult); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validator.ValidationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatorInterfaceMock_ValidateFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateFile'
type ValidatorInterfaceMock_ValidateFile_Call struct {
	*mock.Call
}

// ValidateFile is a helper method to define mock.On call
//   - filePath string
func (_e *ValidatorInterfaceMock_Expecter) ValidateFile(filePath interface{}) *ValidatorInterfaceMock_ValidateFile_Call {
	return &ValidatorInterfaceMock_ValidateFile_Call{Call: _e.mock.On("ValidateFile", filePath)}
}

func (_c *ValidatorInterfaceMock_ValidateFile_Call) Run(run func(filePath string)) *ValidatorInterfaceMock_ValidateFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ValidatorInterfaceMock_ValidateFile_Call) Return(_a0 *validator.ValidationResult, _a1 error) *ValidatorInterfaceMock_ValidateFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ValidatorInterfaceMock_ValidateFile_Call) RunAndReturn(run func(string) (*validator.ValidationResult, error)) *ValidatorInterfaceMock_ValidateFile_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateStruct provides a mock function with given fields: cv
func (_m *ValidatorInterfaceMock) ValidateStruct(cv model.CV) (*validator.ValidationResult, error) {
	ret := _m.Called(cv)

	if len(ret) == 0 {
		panic("no return value specified for ValidateStruct")
	}

	var r0 *validator.ValidationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(model.CV) (*validator.ValidationResult, error)); ok {
		return rf(cv)
	}
	if rf, ok := ret.Get(0).(func(model.CV) *validator.ValidationResult); ok {
		r0 = rf(cv)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validator.ValidationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(model.CV) error); ok {
		r1 = rf(cv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatorInterfaceMock_ValidateStruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateStruct'
type ValidatorInterfaceMock_ValidateStruct_Call struct {
	*mock.Call
}

// ValidateStruct is a helper method to define mock.On call
//   - cv model.CV
func (_e *ValidatorInterfaceMock_Expecter) ValidateStruct(cv interface{}) *ValidatorInterfaceMock_ValidateStruct_Call {
	return &ValidatorInterfaceMock_ValidateStruct_Call{Call: _e.mock.On("ValidateStruct", cv)}
}

func (_c *ValidatorInterfaceMock_ValidateStruct_Call) Run(run func(cv model.CV)) *ValidatorInterfaceMock_ValidateStruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.CV))
	})
	return _c
}

func (_c *ValidatorInterfaceMock_ValidateStruct_Call) Return(_a0 *validator.ValidationResult, _a1 error) *ValidatorInterfaceMock_ValidateStruct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ValidatorInterfaceMock_ValidateStruct_Call) RunAndReturn(run func(model.CV) (*validator.ValidationResult, error)) *ValidatorInterfaceMock_ValidateStruct_Call {
	_c.Call.Return(run)
	return _c
}

// NewValidatorInterfaceMock creates a new instance of ValidatorInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidatorInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ValidatorInterfaceMock {
	mock := &ValidatorInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
