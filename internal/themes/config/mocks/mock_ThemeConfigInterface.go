// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package theme_config

import (
	mock "github.com/stretchr/testify/mock"
)

// NewThemeConfigInterfaceMock creates a new instance of ThemeConfigInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewThemeConfigInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ThemeConfigInterfaceMock {
	mock := &ThemeConfigInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ThemeConfigInterfaceMock is an autogenerated mock type for the ThemeConfigInterface type
type ThemeConfigInterfaceMock struct {
	mock.Mock
}

type ThemeConfigInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ThemeConfigInterfaceMock) EXPECT() *ThemeConfigInterfaceMock_Expecter {
	return &ThemeConfigInterfaceMock_Expecter{mock: &_m.Mock}
}

// VerifyThemeMinimumVersion provides a mock function for the type ThemeConfigInterfaceMock
func (_mock *ThemeConfigInterfaceMock) VerifyThemeMinimumVersion(cvwonderVersion string) bool {
	ret := _mock.Called(cvwonderVersion)

	if len(ret) == 0 {
		panic("no return value specified for VerifyThemeMinimumVersion")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(cvwonderVersion)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// ThemeConfigInterfaceMock_VerifyThemeMinimumVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyThemeMinimumVersion'
type ThemeConfigInterfaceMock_VerifyThemeMinimumVersion_Call struct {
	*mock.Call
}

// VerifyThemeMinimumVersion is a helper method to define mock.On call
//   - cvwonderVersion
func (_e *ThemeConfigInterfaceMock_Expecter) VerifyThemeMinimumVersion(cvwonderVersion interface{}) *ThemeConfigInterfaceMock_VerifyThemeMinimumVersion_Call {
	return &ThemeConfigInterfaceMock_VerifyThemeMinimumVersion_Call{Call: _e.mock.On("VerifyThemeMinimumVersion", cvwonderVersion)}
}

func (_c *ThemeConfigInterfaceMock_VerifyThemeMinimumVersion_Call) Run(run func(cvwonderVersion string)) *ThemeConfigInterfaceMock_VerifyThemeMinimumVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ThemeConfigInterfaceMock_VerifyThemeMinimumVersion_Call) Return(b bool) *ThemeConfigInterfaceMock_VerifyThemeMinimumVersion_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *ThemeConfigInterfaceMock_VerifyThemeMinimumVersion_Call) RunAndReturn(run func(cvwonderVersion string) bool) *ThemeConfigInterfaceMock_VerifyThemeMinimumVersion_Call {
	_c.Call.Return(run)
	return _c
}
