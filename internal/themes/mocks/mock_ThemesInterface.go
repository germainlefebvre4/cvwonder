// Code generated by mockery. DO NOT EDIT.

package themes

import mock "github.com/stretchr/testify/mock"

// ThemesInterfaceMock is an autogenerated mock type for the ThemesInterface type
type ThemesInterfaceMock struct {
	mock.Mock
}

type ThemesInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ThemesInterfaceMock) EXPECT() *ThemesInterfaceMock_Expecter {
	return &ThemesInterfaceMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: theme
func (_m *ThemesInterfaceMock) Create(theme string) {
	_m.Called(theme)
}

// ThemesInterfaceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ThemesInterfaceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - theme string
func (_e *ThemesInterfaceMock_Expecter) Create(theme interface{}) *ThemesInterfaceMock_Create_Call {
	return &ThemesInterfaceMock_Create_Call{Call: _e.mock.On("Create", theme)}
}

func (_c *ThemesInterfaceMock_Create_Call) Run(run func(theme string)) *ThemesInterfaceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ThemesInterfaceMock_Create_Call) Return() *ThemesInterfaceMock_Create_Call {
	_c.Call.Return()
	return _c
}

func (_c *ThemesInterfaceMock_Create_Call) RunAndReturn(run func(string)) *ThemesInterfaceMock_Create_Call {
	_c.Run(run)
	return _c
}

// Install provides a mock function with given fields: theme
func (_m *ThemesInterfaceMock) Install(theme string) {
	_m.Called(theme)
}

// ThemesInterfaceMock_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type ThemesInterfaceMock_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - theme string
func (_e *ThemesInterfaceMock_Expecter) Install(theme interface{}) *ThemesInterfaceMock_Install_Call {
	return &ThemesInterfaceMock_Install_Call{Call: _e.mock.On("Install", theme)}
}

func (_c *ThemesInterfaceMock_Install_Call) Run(run func(theme string)) *ThemesInterfaceMock_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ThemesInterfaceMock_Install_Call) Return() *ThemesInterfaceMock_Install_Call {
	_c.Call.Return()
	return _c
}

func (_c *ThemesInterfaceMock_Install_Call) RunAndReturn(run func(string)) *ThemesInterfaceMock_Install_Call {
	_c.Run(run)
	return _c
}

// List provides a mock function with no fields
func (_m *ThemesInterfaceMock) List() {
	_m.Called()
}

// ThemesInterfaceMock_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ThemesInterfaceMock_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *ThemesInterfaceMock_Expecter) List() *ThemesInterfaceMock_List_Call {
	return &ThemesInterfaceMock_List_Call{Call: _e.mock.On("List")}
}

func (_c *ThemesInterfaceMock_List_Call) Run(run func()) *ThemesInterfaceMock_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ThemesInterfaceMock_List_Call) Return() *ThemesInterfaceMock_List_Call {
	_c.Call.Return()
	return _c
}

func (_c *ThemesInterfaceMock_List_Call) RunAndReturn(run func()) *ThemesInterfaceMock_List_Call {
	_c.Run(run)
	return _c
}

// Verify provides a mock function with given fields: theme
func (_m *ThemesInterfaceMock) Verify(theme string) {
	_m.Called(theme)
}

// ThemesInterfaceMock_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type ThemesInterfaceMock_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - theme string
func (_e *ThemesInterfaceMock_Expecter) Verify(theme interface{}) *ThemesInterfaceMock_Verify_Call {
	return &ThemesInterfaceMock_Verify_Call{Call: _e.mock.On("Verify", theme)}
}

func (_c *ThemesInterfaceMock_Verify_Call) Run(run func(theme string)) *ThemesInterfaceMock_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ThemesInterfaceMock_Verify_Call) Return() *ThemesInterfaceMock_Verify_Call {
	_c.Call.Return()
	return _c
}

func (_c *ThemesInterfaceMock_Verify_Call) RunAndReturn(run func(string)) *ThemesInterfaceMock_Verify_Call {
	_c.Run(run)
	return _c
}

// NewThemesInterfaceMock creates a new instance of ThemesInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewThemesInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ThemesInterfaceMock {
	mock := &ThemesInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
