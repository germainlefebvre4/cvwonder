// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package watcher

import (
	mock "github.com/stretchr/testify/mock"
)

// NewWatcherInterfaceMock creates a new instance of WatcherInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWatcherInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WatcherInterfaceMock {
	mock := &WatcherInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// WatcherInterfaceMock is an autogenerated mock type for the WatcherInterface type
type WatcherInterfaceMock struct {
	mock.Mock
}

type WatcherInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *WatcherInterfaceMock) EXPECT() *WatcherInterfaceMock_Expecter {
	return &WatcherInterfaceMock_Expecter{mock: &_m.Mock}
}

// ObserveFileEvents provides a mock function for the type WatcherInterfaceMock
func (_mock *WatcherInterfaceMock) ObserveFileEvents(baseDirectory string, outputDirectory string, inputFilePath string, themeName string, exportFormat string) {
	_mock.Called(baseDirectory, outputDirectory, inputFilePath, themeName, exportFormat)
	return
}

// WatcherInterfaceMock_ObserveFileEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObserveFileEvents'
type WatcherInterfaceMock_ObserveFileEvents_Call struct {
	*mock.Call
}

// ObserveFileEvents is a helper method to define mock.On call
//   - baseDirectory
//   - outputDirectory
//   - inputFilePath
//   - themeName
//   - exportFormat
func (_e *WatcherInterfaceMock_Expecter) ObserveFileEvents(baseDirectory interface{}, outputDirectory interface{}, inputFilePath interface{}, themeName interface{}, exportFormat interface{}) *WatcherInterfaceMock_ObserveFileEvents_Call {
	return &WatcherInterfaceMock_ObserveFileEvents_Call{Call: _e.mock.On("ObserveFileEvents", baseDirectory, outputDirectory, inputFilePath, themeName, exportFormat)}
}

func (_c *WatcherInterfaceMock_ObserveFileEvents_Call) Run(run func(baseDirectory string, outputDirectory string, inputFilePath string, themeName string, exportFormat string)) *WatcherInterfaceMock_ObserveFileEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *WatcherInterfaceMock_ObserveFileEvents_Call) Return() *WatcherInterfaceMock_ObserveFileEvents_Call {
	_c.Call.Return()
	return _c
}

func (_c *WatcherInterfaceMock_ObserveFileEvents_Call) RunAndReturn(run func(baseDirectory string, outputDirectory string, inputFilePath string, themeName string, exportFormat string)) *WatcherInterfaceMock_ObserveFileEvents_Call {
	_c.Run(run)
	return _c
}
