// Code generated by mockery. DO NOT EDIT.

package cvrender

import (
	model "github.com/germainlefebvre4/cvwonder/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// RenderInterfaceMock is an autogenerated mock type for the RenderInterface type
type RenderInterfaceMock struct {
	mock.Mock
}

type RenderInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RenderInterfaceMock) EXPECT() *RenderInterfaceMock_Expecter {
	return &RenderInterfaceMock_Expecter{mock: &_m.Mock}
}

// Render provides a mock function with given fields: cv, baseDirectory, outputDirectory, inputFilePath, themeName, exportFormat
func (_m *RenderInterfaceMock) Render(cv model.CV, baseDirectory string, outputDirectory string, inputFilePath string, themeName string, exportFormat string) {
	_m.Called(cv, baseDirectory, outputDirectory, inputFilePath, themeName, exportFormat)
}

// RenderInterfaceMock_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type RenderInterfaceMock_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - cv model.CV
//   - baseDirectory string
//   - outputDirectory string
//   - inputFilePath string
//   - themeName string
//   - exportFormat string
func (_e *RenderInterfaceMock_Expecter) Render(cv interface{}, baseDirectory interface{}, outputDirectory interface{}, inputFilePath interface{}, themeName interface{}, exportFormat interface{}) *RenderInterfaceMock_Render_Call {
	return &RenderInterfaceMock_Render_Call{Call: _e.mock.On("Render", cv, baseDirectory, outputDirectory, inputFilePath, themeName, exportFormat)}
}

func (_c *RenderInterfaceMock_Render_Call) Run(run func(cv model.CV, baseDirectory string, outputDirectory string, inputFilePath string, themeName string, exportFormat string)) *RenderInterfaceMock_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.CV), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *RenderInterfaceMock_Render_Call) Return() *RenderInterfaceMock_Render_Call {
	_c.Call.Return()
	return _c
}

func (_c *RenderInterfaceMock_Render_Call) RunAndReturn(run func(model.CV, string, string, string, string, string)) *RenderInterfaceMock_Render_Call {
	_c.Run(run)
	return _c
}

// NewRenderInterfaceMock creates a new instance of RenderInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRenderInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RenderInterfaceMock {
	mock := &RenderInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
