// Code generated by mockery. DO NOT EDIT.

package cvparser

import (
	model "github.com/germainlefebvre4/cvwonder/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ParserInterfaceMock is an autogenerated mock type for the ParserInterface type
type ParserInterfaceMock struct {
	mock.Mock
}

type ParserInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ParserInterfaceMock) EXPECT() *ParserInterfaceMock_Expecter {
	return &ParserInterfaceMock_Expecter{mock: &_m.Mock}
}

// ParseFile provides a mock function with given fields: filePath
func (_m *ParserInterfaceMock) ParseFile(filePath string) (model.CV, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for ParseFile")
	}

	var r0 model.CV
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.CV, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) model.CV); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(model.CV)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParserInterfaceMock_ParseFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseFile'
type ParserInterfaceMock_ParseFile_Call struct {
	*mock.Call
}

// ParseFile is a helper method to define mock.On call
//   - filePath string
func (_e *ParserInterfaceMock_Expecter) ParseFile(filePath interface{}) *ParserInterfaceMock_ParseFile_Call {
	return &ParserInterfaceMock_ParseFile_Call{Call: _e.mock.On("ParseFile", filePath)}
}

func (_c *ParserInterfaceMock_ParseFile_Call) Run(run func(filePath string)) *ParserInterfaceMock_ParseFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ParserInterfaceMock_ParseFile_Call) Return(_a0 model.CV, _a1 error) *ParserInterfaceMock_ParseFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ParserInterfaceMock_ParseFile_Call) RunAndReturn(run func(string) (model.CV, error)) *ParserInterfaceMock_ParseFile_Call {
	_c.Call.Return(run)
	return _c
}

// convertFileContentToStruct provides a mock function with given fields: content
func (_m *ParserInterfaceMock) convertFileContentToStruct(content []byte) (model.CV, error) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for convertFileContentToStruct")
	}

	var r0 model.CV
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (model.CV, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func([]byte) model.CV); ok {
		r0 = rf(content)
	} else {
		r0 = ret.Get(0).(model.CV)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParserInterfaceMock_convertFileContentToStruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'convertFileContentToStruct'
type ParserInterfaceMock_convertFileContentToStruct_Call struct {
	*mock.Call
}

// convertFileContentToStruct is a helper method to define mock.On call
//   - content []byte
func (_e *ParserInterfaceMock_Expecter) convertFileContentToStruct(content interface{}) *ParserInterfaceMock_convertFileContentToStruct_Call {
	return &ParserInterfaceMock_convertFileContentToStruct_Call{Call: _e.mock.On("convertFileContentToStruct", content)}
}

func (_c *ParserInterfaceMock_convertFileContentToStruct_Call) Run(run func(content []byte)) *ParserInterfaceMock_convertFileContentToStruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ParserInterfaceMock_convertFileContentToStruct_Call) Return(_a0 model.CV, _a1 error) *ParserInterfaceMock_convertFileContentToStruct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ParserInterfaceMock_convertFileContentToStruct_Call) RunAndReturn(run func([]byte) (model.CV, error)) *ParserInterfaceMock_convertFileContentToStruct_Call {
	_c.Call.Return(run)
	return _c
}

// readFile provides a mock function with given fields: filePath
func (_m *ParserInterfaceMock) readFile(filePath string) ([]byte, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for readFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParserInterfaceMock_readFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'readFile'
type ParserInterfaceMock_readFile_Call struct {
	*mock.Call
}

// readFile is a helper method to define mock.On call
//   - filePath string
func (_e *ParserInterfaceMock_Expecter) readFile(filePath interface{}) *ParserInterfaceMock_readFile_Call {
	return &ParserInterfaceMock_readFile_Call{Call: _e.mock.On("readFile", filePath)}
}

func (_c *ParserInterfaceMock_readFile_Call) Run(run func(filePath string)) *ParserInterfaceMock_readFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ParserInterfaceMock_readFile_Call) Return(_a0 []byte, _a1 error) *ParserInterfaceMock_readFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ParserInterfaceMock_readFile_Call) RunAndReturn(run func(string) ([]byte, error)) *ParserInterfaceMock_readFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewParserInterfaceMock creates a new instance of ParserInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParserInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParserInterfaceMock {
	mock := &ParserInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
